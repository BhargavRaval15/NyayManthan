// backend/utils/aiservice.js

const axios = require("axios");
const SimplificationLog = require("../models/SimplificationLog");
const dotenv = require("dotenv");
dotenv.config();

// LangChain integration
let langchainAvailable = false;
let simplifyWithLangChain = null;
try {
  ({ simplifyWithLangChain } = require("./langchainSimplifier"));
  langchainAvailable = true;
} catch (e) {
  langchainAvailable = false;
}

class AIService {
  constructor() {
    this.githubToken = process.env.GITHUB_TOKEN;
    this.openaiApiKey = process.env.OPENAI_API_KEY;
    this.openrouterApiKey = process.env.OPENROUTER_API_KEY;

    this.aiProviders = [
      {
        name: "openrouter",
        endpoint: "https://openrouter.ai/api/v1/chat/completions",
        model: "openai/gpt-4o-mini",
        apiKey: this.openrouterApiKey,
        headers: (apiKey) => ({
          Authorization: `Bearer ${apiKey}`,
          "Content-Type": "application/json",
          "HTTP-Referer": "https://nyaymanthan.vercel.app",
          "X-Title": "NyayManthan AI",
        }),
      },
      {
        name: "github",
        endpoint: "https://models.github.ai/inference/chat/completions",
        model: "openai/gpt-4",
        apiKey: this.githubToken,
        headers: (apiKey) => ({
          Authorization: `Bearer ${apiKey}`,
          "Content-Type": "application/json",
        }),
      },
      {
        name: "openai",
        endpoint: "https://api.openai.com/v1/chat/completions",
        model: "gpt-4o-mini", // cheaper + faster than GPT-4
        apiKey: this.openaiApiKey,
        headers: (apiKey) => ({
          Authorization: `Bearer ${apiKey}`,
          "Content-Type": "application/json",
        }),
      },
    ];

    if (this.openrouterApiKey) {
      console.log("ЁЯдЦ AI Service initialized with OpenRouter");
    } else if (this.githubToken) {
      console.log("ЁЯдЦ AI Service initialized with GitHub AI models");
    } else if (this.openaiApiKey) {
      console.log("ЁЯдЦ AI Service initialized with OpenAI");
    } else {
      console.log("ЁЯдЦ AI Service initialized with fallback responses only");
    }
  }

  /**
   * Core AI generation logic
   */
  async generateWithAI(messages) {
    let lastError = null;

    for (const provider of this.aiProviders) {
      if (!provider.apiKey) {
        console.log(`Skipping ${provider.name} - no API key provided`);
        continue;
      }

      try {
        console.log(`ЁЯдЦ Trying ${provider.name} API...`);

        const response = await axios.post(
          provider.endpoint,
          {
            messages,
            model: provider.model,
            temperature: 0.7,
            max_tokens: 2000,
          },
          {
            headers: provider.headers(provider.apiKey),
            timeout: 30000,
          }
        );

        if (
          response.data &&
          response.data.choices &&
          response.data.choices[0]?.message?.content
        ) {
          console.log(`тЬЕ Success with ${provider.name}`);
          return response.data.choices[0].message.content;
        } else {
          throw new Error("Invalid AI response format");
        }
      } catch (error) {
        lastError = error;
        console.error(`тЭМ ${provider.name} failed:`, error.message);

        if (error.response) {
          console.error(
            "Error details:",
            JSON.stringify(error.response.data, null, 2)
          );
        }
        continue;
      }
    }

    throw new Error(
      `All AI providers failed. Last error: ${
        lastError?.response?.data?.error?.message || lastError?.message
      }`
    );
  }

  /**
   * Prompt builder for simplification
   */
  buildSimplificationPrompt(articleNumber, originalText, language = "en") {
    let systemPrompt;
    if (language === "hi") {
      systemPrompt = `рдЖрдк рдПрдХ рд╕рдВрд╡реИрдзрд╛рдирд┐рдХ рдХрд╛рдиреВрди рд╡рд┐рд╢реЗрд╖рдЬреНрдЮ рдФрд░ рд╢рд┐рдХреНрд╖рдХ рд╣реИрдВ, рдЬрд┐рдирдХрд╛ рдЙрджреНрджреЗрд╢реНрдп рдЬрдЯрд┐рд▓ рдХрд╛рдиреВрдиреА рдкрд╛рдареЛрдВ рдХреЛ рдЖрдо рдирд╛рдЧрд░рд┐рдХреЛрдВ рдХреЗ рд▓рд┐рдП рд╕рд░рд▓ рдФрд░ рд╕рдордЭрдиреЗ рдпреЛрдЧреНрдп рдмрдирд╛рдирд╛ рд╣реИред рдЖрдкрдХрд╛ рдХрд╛рд░реНрдп рд╣реИ рднрд╛рд░рддреАрдп рд╕рдВрд╡рд┐рдзрд╛рди рдХреЗ рдЕрдиреБрдЪреНрдЫреЗрдж ${articleNumber} рдХреЛ рдЖрдХрд░реНрд╖рдХ, рд╕реНрдкрд╖реНрдЯ рдФрд░ рдЖрд╕рд╛рди рднрд╛рд╖рд╛ рдореЗрдВ рд╕рдордЭрд╛рдирд╛ред\n\nрдирд┐рд░реНрджреЗрд╢:\n1. рдмрд╣реБрдд рд╕рд░рд▓ рдФрд░ рдмрд╛рддрдЪреАрдд рдХреА рднрд╛рд╖рд╛ рдореЗрдВ рд▓рд┐рдЦреЗрдВ\n2. рдЖрдХрд░реНрд╖рдХ рд╢реАрд░реНрд╖рдХ рдФрд░ рд╕реНрдкрд╖реНрдЯ рд╕рдВрд░рдЪрдирд╛ рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВ\n3. рд░реЛрдЬрд╝рдорд░реНрд░рд╛ рдХреЗ рдЬреАрд╡рди рд╕реЗ рд╡реНрдпрд╛рд╡рд╣рд╛рд░рд┐рдХ рдЙрджрд╛рд╣рд░рдг рд╢рд╛рдорд┐рд▓ рдХрд░реЗрдВ\n4. рдХрд╛рдиреВрдиреА рд╢рдмреНрджреЛрдВ рдХреЛ рдЖрд╕рд╛рди рд╣рд┐рдВрджреА рдореЗрдВ рд╕рдордЭрд╛рдПрдБ\n5. рдЗрд╕реЗ рд░реЛрдЪрдХ рдФрд░ рдпрд╛рджрдЧрд╛рд░ рдмрдирд╛рдПрдВ\n6. рдмреЗрд╣рддрд░ рдкрдврд╝рдиреЗ рдХреЗ рд▓рд┐рдП Markdown рдлреЙрд░реНрдореЗрдЯрд┐рдВрдЧ рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВ\n\nрдЖрд╡рд╢реНрдпрдХ рдкреНрд░рд╛рд░реВрдк:\n# рдЕрдиреБрдЪреНрдЫреЗрдж ${articleNumber} - [рд╕рд░рд▓ рд╢реАрд░реНрд╖рдХ]\n**рд╕рд░рд▓ рд╕рд╛рд░рд╛рдВрд╢:**\n[2-3 рд╡рд╛рдХреНрдп рдореЗрдВ рд╕рдордЭрд╛рдПрдБ рдХрд┐ рдпрд╣ рдЕрдиреБрдЪреНрдЫреЗрдж рдХреНрдпрд╛ рдХрд░рддрд╛ рд╣реИ]\n**рдореБрдЦреНрдп рдмрд┐рдВрджреБ:**\nтАв [рдкрд╣рд▓рд╛ рдореБрдЦреНрдп рдмрд┐рдВрджреБ]\nтАв [рджреВрд╕рд░рд╛ рдореБрдЦреНрдп рдмрд┐рдВрджреБ]\nтАв [рддреАрд╕рд░рд╛ рдореБрдЦреНрдп рдмрд┐рдВрджреБ]\nтАв [рдЪреМрдерд╛ рдореБрдЦреНрдп рдмрд┐рдВрджреБ]\n**рд╡рд╛рд╕реНрддрд╡рд┐рдХ рдкреНрд░рднрд╛рд╡:**\nтАв **рджреИрдирд┐рдХ рдЬреАрд╡рди:** [рдЖрдо рд▓реЛрдЧреЛрдВ рдкрд░ рдкреНрд░рднрд╛рд╡]\nтАв **рд╕рд░рдХрд╛рд░реА рдХрд╛рд░реНрдп:** [рд╕рд░рдХрд╛рд░ рдХреНрдпрд╛ рдХрд░ рд╕рдХрддреА рд╣реИ/рдирд╣реАрдВ рдХрд░ рд╕рдХрддреА]\nтАв **рдХрд╛рдиреВрдиреА рд╕реБрд░рдХреНрд╖рд╛:** [рдирд╛рдЧрд░рд┐рдХреЛрдВ рдХреА рд╕реБрд░рдХреНрд╖рд╛]\nтАв **рд╕рд╛рдорд╛рдЬрд┐рдХ рдиреНрдпрд╛рдп:** [рдиреНрдпрд╛рдп рдХреА рдмрд╛рдд]\n**рдорд╣рддреНрд╡рдкреВрд░реНрдг рд╢рдмреНрдж:**\nтАв **[рдХрд╛рдиреВрдиреА рд╢рдмреНрдж 1]**: [рд╕рд░рд▓ рдкрд░рд┐рднрд╛рд╖рд╛ рдФрд░ рдЙрджрд╛рд╣рд░рдг]\nтАв **[рдХрд╛рдиреВрдиреА рд╢рдмреНрдж 2]**: [рд╕рд░рд▓ рдкрд░рд┐рднрд╛рд╖рд╛ рдФрд░ рдЙрджрд╛рд╣рд░рдг]\n**рдЙрджрд╛рд╣рд░рдг:**\nтАв **рдкрд░рд┐рджреГрд╢реНрдп 1:** [рдЕрдиреБрдЪреНрдЫреЗрдж рдХрд╛ рд╡реНрдпрд╛рд╡рд╣рд╛рд░рд┐рдХ рдЙрдкрдпреЛрдЧ]\nтАв **рдкрд░рд┐рджреГрд╢реНрдп 2:** [рдПрдХ рдФрд░ рдЙрджрд╛рд╣рд░рдг]\nтАв **рдкрд░рд┐рджреГрд╢реНрдп 3:** [рд╡рд╛рд╕реНрддрд╡рд┐рдХ рдЬреАрд╡рди рдореЗрдВ рдЙрдкрдпреЛрдЧ]\nтАв **рдЖрдкрдХреЗ рд▓рд┐рдП рдХреНрдпрд╛ рдорд╛рдпрдиреЗ рд░рдЦрддрд╛ рд╣реИ:** [рд╡реНрдпрдХреНрддрд┐рдЧрдд рдорд╣рддреНрд╡]\n---\n*рдпрд╣ рд╡реНрдпрд╛рдЦреНрдпрд╛ рдирд╛рдЧрд░рд┐рдХреЛрдВ рдХреЛ рдЙрдирдХреЗ рд╕рдВрд╡реИрдзрд╛рдирд┐рдХ рдЕрдзрд┐рдХрд╛рд░реЛрдВ рдФрд░ рд╕реБрд░рдХреНрд╖рд╛ рдХреЛ рд╕рдордЭрдиреЗ рдореЗрдВ рдорджрдж рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рд╣реИред*`;
    } else if (language === "gu") {
      systemPrompt = `ркдркорлЗ ркПркХ рк╕ркВрк╡рк┐ркзрк╛ркирк┐ркХ ркХрк╛ркпркжрк╛ ркирк┐рк╖рлНркгрк╛ркд ркЕркирлЗ рк╢рк┐ркХрлНрк╖ркХ ркЫрлЛ, ркЬрлЗ рк╕рк╛ркорк╛ркирлНркп ркирк╛ркЧрк░рк┐ркХрлЛ ркорк╛ркЯрлЗ ркЬркЯрк┐рк▓ ркХрк╛ркирлВркирлА рк▓ркЦрк╛ркгркирлЗ рк╕рк░рк│ ркЕркирлЗ рк╕ркоркЬрк╡рк╛ ркпрлЛркЧрлНркп ркмркирк╛рк╡рк╡рк╛ркирлБркВ ркХрк╛рко ркХрк░рлЗ ркЫрлЗ. ркдркорк╛рк░рлБркВ ркХрк╛рк░рлНркп ркнрк╛рк░ркдрлАркп рк╕ркВрк╡рк┐ркзрк╛ркиркирк╛ ркХрк▓рко ${articleNumber} ркирлЗ ркЖркХрк░рлНрк╖ркХ, рк╕рлНрккрк╖рлНркЯ ркЕркирлЗ рк╕рк░рк│ ркнрк╛рк╖рк╛ркорк╛ркВ рк╕ркоркЬрк╛рк╡рк╡рлБркВ ркЫрлЗ.\n\nрк╕рлВркЪркирк╛ркУ:\n1. рк╕рк░рк│, рк╡рк╛ркдркЪрлАркд ркЬрлЗрк╡рлА ркнрк╛рк╖рк╛ркорк╛ркВ рк▓ркЦрлЛ\n2. ркЖркХрк░рлНрк╖ркХ рк╢рлАрк░рлНрк╖ркХрлЛ ркЕркирлЗ рк╕рлНрккрк╖рлНркЯ ркмркВркзрк╛рк░ркг рк╡рк╛рккрк░рлЛ\n3. рк░рлЛркЬрк┐ркВркжрк╛ ркЬрлАрк╡ркиркорк╛ркВркерлА ркЙркжрк╛рк╣рк░ркгрлЛ ркЖрккрлЛ\n4. ркХрк╛ркирлВркирлА рк╢ркмрлНркжрлЛркирлЗ рк╕рк░рк│ ркЧрлБркЬрк░рк╛ркдрлАркорк╛ркВ рк╕ркоркЬрк╛рк╡рлЛ\n5. рк░рк╕рккрлНрк░ркж ркЕркирлЗ ркпрк╛ркжркЧрк╛рк░ ркмркирк╛рк╡рлЛ\n6. Markdown рклрлЛрк░рлНркорлЗркЯрк┐ркВркЧ рк╡рк╛рккрк░рлЛ\n\nркЖрк╡рк╢рлНркпркХ ркмркВркзрк╛рк░ркг:\n# ркХрк▓рко ${articleNumber} - [рк╕рк░рк│ рк╢рлАрк░рлНрк╖ркХ]\n**рк╕рк░рк│ рк╕рк╛рк░рк╛ркВрк╢:**\n[2-3 рк╡рк╛ркХрлНркпркорк╛ркВ рк╕ркоркЬрк╛рк╡рлЛ ркХрлЗ ркЖ ркХрк▓рко рк╢рлБркВ ркХрк░рлЗ ркЫрлЗ]\n**ркорлБркЦрлНркп ркорлБркжрлНркжрк╛:**\nтАв [рккрлНрк░ркерко ркорлБркЦрлНркп ркорлБркжрлНркжрлЛ]\nтАв [ркмрлАркЬрлЛ ркорлБркЦрлНркп ркорлБркжрлНркжрлЛ]\nтАв [ркдрлНрк░рлАркЬрлЛ ркорлБркЦрлНркп ркорлБркжрлНркжрлЛ]\nтАв [ркЪрлЛркерлЛ ркорлБркЦрлНркп ркорлБркжрлНркжрлЛ]\n**рк╡рк╛рк╕рлНркдрк╡рк┐ркХ ркЕрк╕рк░:**\nтАв **ркжрлИркирк┐ркХ ркЬрлАрк╡рки:** [рк▓рлЛркХрлЛ рккрк░ ркЕрк╕рк░]\nтАв **рк╕рк░ркХрк╛рк░рлА рккркЧрк▓рк╛ркВ:** [рк╕рк░ркХрк╛рк░ рк╢рлБркВ ркХрк░рлА рк╢ркХрлЗ/рки ркХрк░рлА рк╢ркХрлЗ]\nтАв **ркХрк╛ркирлВркирлА рк╕рлБрк░ркХрлНрк╖рк╛:** [ркирк╛ркЧрк░рк┐ркХрлЛркирлА рк╕рлБрк░ркХрлНрк╖рк╛]\nтАв **рк╕рк╛ркорк╛ркЬрк┐ркХ ркирлНркпрк╛ркп:** [ркирлНркпрк╛ркпркирлА рк╡рк╛ркд]\n**ркорк╣ркдрлНрк╡рккрлВрк░рлНркг рк╢ркмрлНркжрлЛ:**\nтАв **[ркХрк╛ркирлВркирлА рк╢ркмрлНркж 1]**: [рк╕рк░рк│ рк╡рлНркпрк╛ркЦрлНркпрк╛ ркЕркирлЗ ркЙркжрк╛рк╣рк░ркг]\nтАв **[ркХрк╛ркирлВркирлА рк╢ркмрлНркж 2]**: [рк╕рк░рк│ рк╡рлНркпрк╛ркЦрлНркпрк╛ ркЕркирлЗ ркЙркжрк╛рк╣рк░ркг]\n**ркЙркжрк╛рк╣рк░ркгрлЛ:**\nтАв **рккрк░рк┐рк╕рлНркерк┐ркдрк┐ 1:** [ркХрк▓ркоркирлЛ ркЙрккркпрлЛркЧ]\nтАв **рккрк░рк┐рк╕рлНркерк┐ркдрк┐ 2:** [ркмрлАркЬрлБркВ ркЙркжрк╛рк╣рк░ркг]\nтАв **рккрк░рк┐рк╕рлНркерк┐ркдрк┐ 3:** [рк╡рк╛рк╕рлНркдрк╡рк┐ркХ ркЬрлАрк╡ркиркорк╛ркВ ркЙрккркпрлЛркЧ]\nтАв **ркдркорк╛рк░рк╛ ркорк╛ркЯрлЗ рк╢рлБркВ ркЕрк░рлНрке ркЫрлЗ:** [рк╡рлНркпркХрлНркдрк┐ркЧркд ркорк╣ркдрлНрк╡]\n---\n*ркЖ рк╕ркоркЬрк╛рк╡ркЯ ркирк╛ркЧрк░рк┐ркХрлЛркирлЗ ркдрлЗркоркирк╛ рк╕ркВрк╡рк┐ркзрк╛ркирк┐ркХ ркЕркзрк┐ркХрк╛рк░рлЛ ркЕркирлЗ рк╕рлБрк░ркХрлНрк╖рк╛ркирлЗ рк╕ркоркЬрк╡рк╛ркорк╛ркВ ркоркжркж ркХрк░рк╡рк╛ ркорк╛ркЯрлЗ ркЫрлЗ.*`;
    } else {
      systemPrompt = `You are a constitutional law expert and educator specializing in making complex legal texts accessible to ordinary citizens. Your task is to simplify Article ${articleNumber} of the Indian Constitution in an engaging, clear, and visually appealing format.\n\nINSTRUCTIONS:\n1. Write in simple, conversational language that anyone can understand\n2. Use compelling headings and clear structure\n3. Include practical, relatable examples from daily life\n4. Explain legal terminology in plain English\n5. Make it engaging and memorable\n6. Use proper Markdown formatting for better readability\n\nREQUIRED FORMAT (use exactly this structure):\n# Article ${articleNumber} - [Clear, Simple Title]\n**Simple Summary:**\n[Write 2-3 engaging sentences that explain what this article does in everyday language]\n**Key Points:**\nтАв [First main point - use simple, active voice]\nтАв [Second main point - include practical benefits]\nтАв [Third main point - explain protections/rights]\nтАв [Fourth main point - mention any exceptions or special cases]\n**Real-World Impact:**\nтАв **Daily Life:** [How this affects ordinary people]\nтАв **Government Actions:** [What government can/cannot do]\nтАв **Legal Protection:** [How citizens are protected]\nтАв **Social Justice:** [How this promotes fairness]\n**Important Terms:**\nтАв **[Legal Term 1]**: [Simple, clear definition with example]\nтАв **[Legal Term 2]**: [Simple, clear definition with example]\n**Examples:**\nтАв **Scenario 1:** [Relatable situation showing the article in action]\nтАв **Scenario 2:** [Another practical example]\nтАв **Scenario 3:** [Real-world application]\nтАв **What This Means for You:** [Personal relevance]\n---\n*This explanation is designed to help citizens understand their constitutional rights and protections.*`;
    }
    let userPrompt;
    if (language === "hi") {
      userPrompt = `рдХреГрдкрдпрд╛ рднрд╛рд░рддреАрдп рд╕рдВрд╡рд┐рдзрд╛рди рдХреЗ рдЕрдиреБрдЪреНрдЫреЗрдж ${articleNumber} рдХреЛ рджрд┐рдП рдЧрдП рдкреНрд░рд╛рд░реВрдк рдореЗрдВ рд╕рд░рд▓ рд╣рд┐рдВрджреА рдореЗрдВ рд╕рдордЭрд╛рдПрдБ:\n\nрдореВрд▓ рдкрд╛рда:\n${originalText}`;
    } else if (language === "gu") {
      userPrompt = `ркХрлГрккрк╛ ркХрк░рлАркирлЗ ркнрк╛рк░ркдрлАркп рк╕ркВрк╡рк┐ркзрк╛ркиркирк╛ ркХрк▓рко ${articleNumber} ркирлЗ ркЖрккрлЗрк▓рк╛ ркмркВркзрк╛рк░ркгркорк╛ркВ рк╕рк░рк│ ркЧрлБркЬрк░рк╛ркдрлА ркнрк╛рк╖рк╛ркорк╛ркВ рк╕ркоркЬрк╛рк╡рлЛ:\n\nркорлВрк│ рк▓ркЦрк╛ркг:\n${originalText}`;
    } else {
      userPrompt = `Please simplify Article ${articleNumber} of the Indian Constitution using the exact format provided:\n\nORIGINAL TEXT:\n${originalText}`;
    }
    return [
      { role: "system", content: systemPrompt },
      { role: "user", content: userPrompt },
    ];
  }

  /**
   * Mock / fallback simplification
   */
  generateMockSimplification(articleNumber, originalText) {
    console.log(
      `ЁЯдЦ Generating fallback simplification for Article ${articleNumber}`
    );
    return `# Article ${articleNumber} - Constitutional Provision (Simplified)

**Simple Summary:**
This article lays down important rules for citizens and the government.

**Key Points:**
тАв Defines rights and responsibilities
тАв Ensures fairness
тАв Protects against misuse of power

**Real-World Impact:**
тАв Affects how government treats people
тАв Helps citizens know their rights

---
**Note:** This is a fallback explanation. For official legal meaning, consult experts.
Generated by NyayManthan AI Assistant on ${new Date().toLocaleDateString(
      "en-IN"
    )}`;
  }

  /**
   * Main function - simplify article
   */

  async simplifyArticle(
    articleNumber,
    originalText,
    userId = "anonymous",
    language = "en"
  ) {
    const startTime = Date.now();
    console.log(`ЁЯУЪ Simplifying Article ${articleNumber}`);

    try {
      let simplifiedText;
      let model = "fallback-response";
      let tokensUsed = 0;

      // Use LangChain if enabled and available
      if (process.env.USE_LANGCHAIN === "true" && langchainAvailable) {
        try {
          // LangChain currently only supports English
          simplifiedText = await simplifyWithLangChain(originalText);
          model = "langchain/gpt-4o";
          tokensUsed = Math.floor(simplifiedText.length / 4);
        } catch (lcError) {
          console.warn(`тЪая╕П LangChain failed, falling back: ${lcError.message}`);
          simplifiedText = this.generateMockSimplification(
            articleNumber,
            originalText
          );
        }
      } else if (
        this.openrouterApiKey ||
        this.openaiApiKey ||
        this.githubToken
      ) {
        try {
          const messages = this.buildSimplificationPrompt(
            articleNumber,
            originalText,
            language
          );
          simplifiedText = await this.generateWithAI(messages);
          model = this.openrouterApiKey
            ? "openrouter/gpt-4o-mini"
            : this.openaiApiKey
            ? "openai/gpt-4o-mini"
            : "github/gpt-4";
          tokensUsed = Math.floor(simplifiedText.length / 4);
        } catch (aiError) {
          console.warn(`тЪая╕П AI failed, using fallback: ${aiError.message}`);
          simplifiedText = this.generateMockSimplification(
            articleNumber,
            originalText
          );
        }
      } else {
        simplifiedText = this.generateMockSimplification(
          articleNumber,
          originalText
        );
      }

      const responseTime = Date.now() - startTime;
      await this.logSimplification({
        articleNumber,
        userId,
        originalText,
        simplifiedText,
        model,
        tokensUsed,
        responseTime,
        isSuccessful: true,
      });

      return {
        success: true,
        simplifiedText,
        metadata: {
          tokensUsed,
          responseTime,
          model,
          timestamp: new Date().toISOString(),
        },
      };
    } catch (error) {
      console.error(
        `тЭМ Error simplifying Article ${articleNumber}:`,
        error.message
      );
      return {
        success: false,
        simplifiedText: this.generateMockSimplification(
          articleNumber,
          originalText
        ),
        metadata: { model: "error-fallback", error: error.message },
      };
    }
  }

  /**
   * Log results to DB
   */
  async logSimplification(logData) {
    try {
      const log = new SimplificationLog(logData);
      await log.save();
      console.log(
        `ЁЯУЭ Logged simplification for Article ${logData.articleNumber}`
      );
    } catch (error) {
      console.error("Failed to log simplification:", error.message);
    }
  }
}

module.exports = new AIService();
